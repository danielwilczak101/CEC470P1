{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPS-BoldMT;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat3\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat4\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\tx20\tx360\pardeftab720\li360\fi-360\sl480\slmult1\partightenfactor0
\ls1\ilvl0
\f0\b\fs22 \cf2 {\listtext	1.	}What opcode will blank memory initialized to 0x00 look like to the processor?\
\pard\pardeftab720\sl480\slmult1\partightenfactor0

\f1\b0 \cf2 	0x00 represents the following:\
		STOR          ACC, [address]\
\
	Since 0x00 is all zeroes, and we assume the memory has already been cleared, then the operand \
	will also be 0x0000. Thus:\
		STOR          ACC, [0x0000]\
\
\pard\tx20\tx360\pardeftab720\li360\fi-360\sl480\slmult1\partightenfactor0
\ls2\ilvl0
\f0\b \cf2 {\listtext	2.	}Of the 256 possible opcodes we can get from and 8-bit opcode, how many are not being used in our instruction set, i.e., how many instructions could we add for future expansion of our processor?\
\pard\pardeftab720\sl480\slmult1\partightenfactor0

\f1\b0 \cf2 	\
\
\pard\tx20\tx360\pardeftab720\li360\fi-360\sl480\slmult1\partightenfactor0
\ls3\ilvl0
\f0\b \cf2 {\listtext	3.	}What would we need to add to our simulator to be able to include the following instructions: compare ACC with a constant, PUSH to or PULL from the stack, and take the 2\'92s complement of ACC?\
\pard\pardeftab720\sl480\slmult1\partightenfactor0

\f1\b0 \cf2 	To compare ACC with a constant, we would need to add an additional register that could hold the \
	result of a mathematical operation comparing the two.\
\
	To PUSH to or PULL from the stack, we would need to create an additional register that will act \
	as a pointer that would point to the memory of where the stack is.\
\
	To take the 2\'92s complement of ACC, we would need to write and add code that would perform the \
	operation ACC = -ACC.\
\
\pard\tx20\tx360\pardeftab720\li360\fi-360\sl480\slmult1\partightenfactor0
\ls4\ilvl0
\f0\b \cf2 {\listtext	4.	}If executeInstruction() were divided into two parts, decode and execute, what additional global resources would be needed for your simulator?\
\pard\pardeftab720\sl480\slmult1\partightenfactor0

\f1\b0 \cf2 	A minimum requirement would be to pass the results of the decoding part to the execution part. \
	So, a global resource that can handle that would be needed for the simulator.}